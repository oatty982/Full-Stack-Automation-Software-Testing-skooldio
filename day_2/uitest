Last login: Thu Nov 14 16:11:18 on ttys007
macintosh@Oat-2 ui % ls
Dockerfile		constants		node_modules		pages			tailwind.config.js
README.md		docker-compose.yml	nuxt.config.ts		postman			tsconfig.json
app.vue			layouts			openapi.gen.ts		public			types
assets			lib			package-lock.json	server
components		middleware		package.json		stores
macintosh@Oat-2 ui % cd ..
macintosh@Oat-2 nodejs % mkdir ui-test
macintosh@Oat-2 nodejs % cd ui-test
macintosh@Oat-2 ui-test % npm init -y
Wrote to /Users/macintosh/Desktop/skooldio_automate/workshop-full-stack-testing/nodejs/ui-test/package.json:

{
  "name": "ui-test",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}



macintosh@Oat-2 ui-test % ls         
package.json
macintosh@Oat-2 ui-test % npm init playwright@latest
Need to install the following packages:
create-playwright@1.17.134
Ok to proceed? (y) y


> ui-test@1.0.0 npx
> create-playwright

Getting started with writing end-to-end tests with Playwright:
Initializing project in '.'
âœ” Do you want to use TypeScript or JavaScript? Â· JavaScript
âœ” Where to put your end-to-end tests? Â· tests
âœ” Add a GitHub Actions workflow? (y/N) Â· false
âœ” Install Playwright browsers (can be done manually via 'npx playwright install')? (Y/n) Â· true
Installing Playwright Test (npm install --save-dev @playwright/test)â€¦

added 3 packages, and audited 4 packages in 5s

found 0 vulnerabilities
Installing Types (npm install --save-dev @types/node)â€¦

added 3 packages, and audited 7 packages in 759ms

found 0 vulnerabilities
Writing playwright.config.js.
Writing tests/example.spec.js.
Writing tests-examples/demo-todo-app.spec.js.
Writing package.json.
Downloading browsers (npx playwright install)â€¦
Downloading Chromium 130.0.6723.31 (playwright build v1140) from https://playwright.azureedge.net/builds/chromium/1140/chromium-mac-arm64.zip
139.7 MiB [====================] 100% 0.0s
Chromium 130.0.6723.31 (playwright build v1140) downloaded to /Users/macintosh/Library/Caches/ms-playwright/chromium-1140
Downloading FFMPEG playwright build v1010 from https://playwright.azureedge.net/builds/ffmpeg/1010/ffmpeg-mac-arm64.zip
1.1 MiB [====================] 100% 0.0s
FFMPEG playwright build v1010 downloaded to /Users/macintosh/Library/Caches/ms-playwright/ffmpeg-1010
Downloading Firefox 131.0 (playwright build v1465) from https://playwright.azureedge.net/builds/firefox/1465/firefox-mac-arm64.zip
80.6 MiB [====================] 100% 0.0s
Firefox 131.0 (playwright build v1465) downloaded to /Users/macintosh/Library/Caches/ms-playwright/firefox-1465
Downloading Webkit 18.0 (playwright build v2083) from https://playwright.azureedge.net/builds/webkit/2083/webkit-mac-14-arm64.zip
68.4 MiB [====================] 100% 0.0s
Webkit 18.0 (playwright build v2083) downloaded to /Users/macintosh/Library/Caches/ms-playwright/webkit-2083
âœ” Success! Created a Playwright Test project at /Users/macintosh/Desktop/skooldio_automate/workshop-full-stack-testing/nodejs/ui-test

Inside that directory, you can run several commands:

  npx playwright test
    Runs the end-to-end tests.

  npx playwright test --ui
    Starts the interactive UI mode.

  npx playwright test --project=chromium
    Runs the tests only on Desktop Chrome.

  npx playwright test example
    Runs the tests in a specific file.

  npx playwright test --debug
    Runs the tests in debug mode.

  npx playwright codegen
    Auto generate tests with Codegen.

We suggest that you begin by typing:

    npx playwright test

And check out the following files:
  - ./tests/example.spec.js - Example end-to-end test
  - ./tests-examples/demo-todo-app.spec.js - Demo Todo App end-to-end tests
  - ./playwright.config.js - Playwright Test configuration

Visit https://playwright.dev/docs/intro for more information. âœ¨

Happy hacking! ðŸŽ­
macintosh@Oat-2 ui-test % 
